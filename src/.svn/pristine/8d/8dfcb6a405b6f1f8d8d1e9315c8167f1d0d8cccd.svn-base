/**公告跑马灯 */
class HorseRace1 extends egret.DisplayObjectContainer {
	private static _mInstance: HorseRace1;
	public static get getInstance(): HorseRace1 {
		if (HorseRace1._mInstance == undefined)
			HorseRace1._mInstance = new HorseRace1();
		return HorseRace1._mInstance;
	}
	/**滑动触摸屏 */
	private _mBGMove: egret.Bitmap;

	/** 宣传图层*/
	private _mPropagGroup: egret.DisplayObjectContainer;

	/** 点图层*/
	private _mSpotGroup: egret.DisplayObjectContainer;

	/**跑马灯宣传图列表 */
	private propagandaMap: GHashMap<RaceObj>;
	/**跑马灯点图列表 */
	private spotMap: GHashMap<egret.Bitmap>;

	/**跑马灯总张数 */
	private _mBitList: Array<string> = ["page1.png", "page2.png", "page3.png"];
	/**下标图片*/
	private _mBitXBList: Array<string> = ["point_g.png", "point_r.png"];
	/**跑马灯间隔时间 5秒*/
	private _mSpaceTime: number = 3000;
	private _mSpaceTimeTemp: number = 3000;

	/**当前播放张数 */
	private _mIndex: number = 1;
	/**首次进入 */
	private isFirst: boolean = true;

	/**进行点击 定时器不能滑动*/
	private isTouch: boolean = false;
	private bg: egret.Bitmap;
	private bnt: egret.Bitmap;

	private constructor() {
		super();
		this.touchEnabled = true;
		this._mPropagGroup = new egret.DisplayObjectContainer();
		this._mSpotGroup = new egret.DisplayObjectContainer();

		this.propagandaMap = new GHashMap<RaceObj>();
		this.spotMap = new GHashMap<egret.Bitmap>();
		RES.getResByUrl('resource/assets/images/ui/' + this._mBitXBList[0], (e) => { }, this);
		RES.getResByUrl('resource/assets/images/ui/' + this._mBitXBList[1], (e) => { }, this);
		this.initMap();

		this._mBGMove = new egret.Bitmap();
		RES.getResByUrl('resource/assets/images/ui/join_bg.jpg', (e) => { this._mBGMove.$setBitmapData(e); }, this);
		this.addChildAt(this._mBGMove, 1);

		let shareC = new egret.Shape();
		shareC.graphics.beginFill(0xffffff, 1);
		shareC.graphics.drawRect(0, GameMain.getInstance.StageHeight - 141, GameMain.getInstance.StageWidth, 141);
		shareC.graphics.endFill();
		this.addChildAt(shareC, 2);

		if (this.bnt == undefined) {
			this.bnt = new egret.Bitmap();
			this.bnt.x = 211;
			this.bnt.y = GameMain.getInstance.StageHeight - 106;
			RES.getResByUrl("resource/assets/images/ui/btn_join.png", (e) => { this.bnt.$setBitmapData(e); }, this);
		}
		this.bnt.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onclick, this);
		this.bnt.touchEnabled=true;
		this.addChild(this.bnt);
		this.setDB();

		this.addChild(this._mPropagGroup);
		this.addChild(this._mSpotGroup);
	}

	private _mShareC: egret.Shape;
	/**适配处理 */
	private setDB(): void {
		this._mShareC = new egret.Shape();
		this._mShareC.graphics.beginFill(0xf5f5f7, 1);
		this._mShareC.graphics.drawRect(0, 0, GameMain.getInstance.StageWidth, GameMain.getInstance.StageHeight);
		this._mShareC.graphics.endFill();
		this.addChildAt(this._mShareC, 0);
	}

	private onclick() {
        KeFuWnd.getInstance.show();
	}


	/**添加滑动事件 */
	private addMove(): void {
		this._mBGMove.touchEnabled = true;
		this._mBGMove.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onBEGIN, this);
		this._mBGMove.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onMOVE, this);
		this._mBGMove.addEventListener(egret.TouchEvent.TOUCH_TAP, this.enterGame, this);
		this._mBGMove.addEventListener(egret.TouchEvent.TOUCH_END, this.onFinish, this);
	}

	/**移除滑动事件 */
	private removeMove(): void {
		this._mBGMove.touchEnabled = false;
		this._mBGMove.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onBEGIN, this);
		this._mBGMove.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onMOVE, this);
		this._mBGMove.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.enterGame, this);
		this._mBGMove.removeEventListener(egret.TouchEvent.TOUCH_END, this.onFinish, this);
	}

	/**偏移量x */
	private deviationX: number;
	/**转折点位置 */
	private tranX: number = 0;
	/**上次位置 */
	private lastX: number = 0;
	/**1左滑 2右滑*/
	private direction: number = 1;

	/**点击下时 */
	private onBEGIN(event: egret.TouchEvent) {
		this.deviationX = event.stageX;
		this.tranX = 0;
		this.lastX = 0;

		this.isTouch = true;
	}

	/**滑动过程 */
	private onMOVE(event: egret.TouchEvent): void {
		let xx: number = (event.stageX - this.deviationX);
		xx = Math.floor(xx);
		if (this.lastX == xx) {
			return;
		}

		this.movePage(xx - this.lastX);
		this.lastX = xx;
	}

	/**当前滑动宣传对象 */
	private bitmapP1: RaceObj;
	/**当前滑动宣传对象 */
	private bitmapP2: RaceObj;

	/**移动偏移量 */
	private movePage(xx: number) {
		if (this.parent == undefined || this._mBitList.length == 1) {
			return;
		}
		if (this.isFirst == true) {
			this.isFirst = false;
			return;
		}

		this.bitmapP1 = this.propagandaMap.Gget(this._mIndex - 1);
		this.bitmapP1.x += xx;
		if (xx > 0) {//右滑动
			this.direction = 2;
		} else if (xx < 0) {//左滑动
			this.direction = 1;
		}

		this.bitmapP2 = this.nextMove();
		this.bitmapP2.x += xx;
	}

	/**获取当前显示对象 */
	private nextMove(): RaceObj {
		let temp: RaceObj;

		let bitmapP3: RaceObj;
		if (this.direction == 2) {//右滑动
			if (this.bitmapP1.x <= 0 && this.bitmapP2 != undefined && this.bitmapP2.parent != undefined) {
				temp = this.bitmapP2;
			} else {
				if (this._mIndex == 1) {
					temp = this.propagandaMap.Gget(this._mBitList.length - 1);

					if (this._mBitList.length == 2) {
						if (temp.x >= GameMain.getInstance.StageWidth) {
							this.removeLash(this._mIndex);
						}
					} else {
						this.removeLash(this._mIndex);
					}
				} else {
					temp = this.propagandaMap.Gget(this._mIndex - 2);

					if (this._mIndex == this._mBitList.length) {
						if (this._mBitList.length == 2) {
							if (temp.x >= GameMain.getInstance.StageWidth) {
								this.removeLash(0);
							}
						} else {
							this.removeLash(0);
						}
					} else {
						this.removeLash(this._mIndex);
					}
				}
				if (temp.parent == undefined) {
					temp.x = -GameMain.getInstance.StageWidth;
					this._mPropagGroup.addChild(temp);
				}
			}
		} else if (this.direction == 1) {//左滑动
			if (this.bitmapP1.x >= 0 && this.bitmapP2 != undefined && this.bitmapP2.parent != undefined) {
				temp = this.bitmapP2;
			} else {
				if (this._mIndex == this._mBitList.length) {
					temp = this.propagandaMap.Gget(0);

					if (this._mBitList.length == 2) {
						if (temp.x <= 0) {
							this.removeLash(this._mIndex - 2);
						}
					} else {
						this.removeLash(this._mIndex - 2);
					}
				} else {
					temp = this.propagandaMap.Gget(this._mIndex);

					if (this._mIndex == 1) {
						if (this._mBitList.length == 2) {
							if (temp.x <= 0) {
								this.removeLash(this._mBitList.length - 1);
							}
						} else {
							this.removeLash(this._mBitList.length - 1);
						}
					} else {
						this.removeLash(this._mIndex - 2);
					}
				}
				if (temp.parent == undefined) {
					temp.x = GameMain.getInstance.StageWidth;
					this._mPropagGroup.addChild(temp);
				}
			}
		}

		return temp;
	}

	/**移除显示上次宣传对象图 */
	private removeLash(num: number) {
		let tempRemove: RaceObj;
		if (this.propagandaMap.GhasKey(num)) {
			tempRemove = this.propagandaMap.Gget(num);
			if (tempRemove.parent != undefined) {
				tempRemove.parent.removeChild(tempRemove);
			}
		}
	}

	/**滑动结束 */
	private onFinish(event: egret.TouchEvent): void {
		if (this.parent == undefined || this._mBitList.length == 1 ||
			this.bitmapP1 == undefined || this.bitmapP2 == undefined) {
			return;
		}

		if (this.direction == 1) {//左滑动
			egret.Tween.get(this.bitmapP1).to({ x: -GameMain.getInstance.StageWidth }, 200).call(this.changeIndex, this);
			egret.Tween.get(this.bitmapP2).to({ x: 0 }, 200);
		} else if (this.direction == 2) {//右滑动
			egret.Tween.get(this.bitmapP1).to({ x: GameMain.getInstance.StageWidth }, 200);
			egret.Tween.get(this.bitmapP2).to({ x: 0 }, 200).call(this.changeIndex, this);
		}

		this.isTouch = false;
		this._mSpaceTimeTemp = this._mSpaceTime;
	}

	/**滑动结束后进行换页 */
	private changeIndex(): void {
		if (this.direction == 1) {//左滑动
			if (this._mIndex >= this._mBitList.length) {
				this._mIndex = 1;
			} else {
				this._mIndex++;
			}
		} else if (this.direction == 2) {
			if (this._mIndex <= 1) {
				this._mIndex = this._mBitList.length;
			} else {
				this._mIndex--;
			}
		}
		if (this.bitmapP1.parent != undefined) {
			this.bitmapP1.parent.removeChild(this.bitmapP1);
		}
		this.bitmapP1 = this.bitmapP2;
		this.bitmapP2 = undefined;
		this.changePage();
	}

	/**初始化列表 */
	private initMap(): void {
		let bitmapP: RaceObj;

		for (let i = 0; i < this._mBitList.length; i++) {
			bitmapP = new RaceObj(i, this._mBitList[i]);
			if (this._mIndex == i + 1) {
				this._mPropagGroup.addChild(bitmapP);
			}
			let bitmapS = new egret.Bitmap();
			let str: string = this._mBitXBList[0];
			if (i == 0) {
				str = this._mBitXBList[1];
			}
			RES.getResByUrl('resource/assets/images/ui/' + str, (e) => {
				bitmapS.$setBitmapData(e);
				bitmapS.x = i * 66;
				this._mSpotGroup.x = (GameMain.getInstance.StageWidth - this._mSpotGroup.width) * 0.5;
				bitmapS.y = GameMain.getInstance.StageHeight - 404 + 200;
				this.spotMap.Gput(i, bitmapS);
			}, this);

			this._mSpotGroup.addChild(bitmapS);
			this.propagandaMap.Gput(i, bitmapP);
		}
	}

	public show(): void {
		if (this.parent == undefined) {
			GUIManager.getInstance.topLay.addChild(this);
		}
		this.isTouch = false;
		this.changePage();
		this.addMove();

		this.bitmapP1 = this.propagandaMap.Gget(this._mIndex - 1);
	}

	public update(it: number): void {
		if (this.isTouch == false) {
			this._mSpaceTimeTemp -= it;
			if (this._mSpaceTimeTemp <= 0) {
				this._mSpaceTimeTemp = this._mSpaceTime;
				this.timeMoveBegin();
			}
		}
	}

	/**进行滑动 */
	private timeMoveBegin(): void {
		if (this.isTouch == true) {
			return;
		}
		this.direction = 1;
		this.bitmapP1 = this.propagandaMap.Gget(this._mIndex - 1);
		if (this._mIndex == this._mBitList.length) {
			this.bitmapP2 = this.propagandaMap.Gget(0);
		} else {
			this.bitmapP2 = this.propagandaMap.Gget(this._mIndex);
		}
		if (this.bitmapP2.parent == undefined) {
			this.bitmapP2.x = GameMain.getInstance.StageWidth;
			this._mPropagGroup.addChild(this.bitmapP2);
		}

		if (this.direction == 1) {//左滑动
			egret.Tween.get(this.bitmapP1).to({ x: -GameMain.getInstance.StageWidth }, 200).call(this.changeIndex, this);
			egret.Tween.get(this.bitmapP2).to({ x: 0 }, 200);
		} else if (this.direction == 2) {//右滑动
			egret.Tween.get(this.bitmapP1).to({ x: GameMain.getInstance.StageWidth }, 200);
			egret.Tween.get(this.bitmapP2).to({ x: 0 }, 200).call(this.changeIndex, this);
		}

		this.changePage();
	}

	/**页码切换 */
	private changePage(): void {
		let nn: number = 0;
		for (let i = 0; i < this._mBitList.length; i++) {
			if (this.spotMap.GhasKey(i)) {
				let bitmapS: egret.Bitmap = this.spotMap.Gget(i);
				if (i == this._mIndex - 1) {
					RES.getResByUrl('resource/assets/images/ui/' + this._mBitXBList[1], (e) => { bitmapS.$setBitmapData(e); }, this);
				} else {
					RES.getResByUrl('resource/assets/images/ui/' + this._mBitXBList[0], (e) => { bitmapS.$setBitmapData(e); }, this);
				}

			}
		}
	}

	/**点击图片进入游戏 */
	private enterGame(): void {
		if (this.bitmapP1 != undefined) {
			if (this.bitmapP1.x != 0) {
				return;
			}
		}
	}


	//隐藏
	public hide(): void {
		this.removeMove();

		if (this.parent != undefined) {
			this.parent.removeChild(this);
		}
	}
}

class RaceObj extends egret.DisplayObjectContainer {
	/**内容图 */
	public nr: egret.Bitmap;
	/**按钮 */
	public bnt: egret.Bitmap;
	/**id */
	public id: number;

	constructor(id: number, str: string) {
		super();
		this.id = id;
		this.init(str);
	}

	public init(str: string): void {
		if (this.nr == undefined) {
			this.nr = new egret.Bitmap();
			RES.getResByUrl("resource/assets/images/ui/" + str, (e) => { this.nr.$setBitmapData(e); }, this);
		}
		this.addChild(this.nr);

	}
}