class HTTPRequest {
	private static _mInstance: HTTPRequest;
	public static get getInstance(): HTTPRequest {
		if (HTTPRequest._mInstance == undefined)
			HTTPRequest._mInstance = new HTTPRequest();
		return HTTPRequest._mInstance;
	}

	/**域名路径前缀 129.204.53.154 */
	public httpHeadUrl: string = 'http://129.204.53.154/other/test/';
	// public httpHeadUrl: string = 'http://192.168.20.23/ticket/api/';

	/**域名路径前缀 步数 */
	public httpHeadUrl2: string = 'http://118.24.158.239/';

	/**登陆协议对象列表 */
	private _mProHandleMap: GHashMap<IProHandle>;

	private constructor() {
		this._mProHandleMap = new GHashMap<IProHandle>();
		this.initData();
	}

	/**所有协议发送通道 */
	public proSend(url: string, content: string, data: HttpData) {
		GHttpMager.getInstance.GaddHttpSend(url, content, this.proBack, this, data);
	}


	/**协议请求回调 */
	private proBack(res: boolean, httpObj: egret.HttpRequest, data: HttpData) {
		if (res == true && this._mProHandleMap.GhasKey(data.mKey)) {//协议有注册
			let proHandle: IProHandle = this._mProHandleMap.Gget(data.mKey);
			proHandle.backHTTP(res, httpObj, data);
		} else if (res == false) {//访问服务器返回false
			egret.log("访问服务器返回false");
		} else {//协议没注册
			egret.log("没有注册协议");
		}
	}

	/**协议注册 */
	private initData(): void {
		this._mProHandleMap.Gput("BK_List", BK_List.getInstance);
		this._mProHandleMap.Gput("BK_List_More", BK_List_More.getInstance);
		this._mProHandleMap.Gput("BK_One", BK_One.getInstance);
		this._mProHandleMap.Gput("BK_Order", BK_Order.getInstance);

		this._mProHandleMap.Gput("RegistPhp", RegistPhp.getInstance);
		this._mProHandleMap.Gput("LoginPhp", LoginPhp.getInstance);
		this._mProHandleMap.Gput("FT_One", FT_One.getInstance);
		this._mProHandleMap.Gput("FT_Order", FT_Order.getInstance);
		this._mProHandleMap.Gput("BK_List", BK_List.getInstance);
		this._mProHandleMap.Gput("FT_List", FT_List.getInstance);
		this._mProHandleMap.Gput("FT_List_More", FT_List_More.getInstance);
		this._mProHandleMap.Gput("Arrangement_Five", Arrangement_Five.getInstance);
		this._mProHandleMap.Gput("Arrangement_Three", Arrangement_Three.getInstance);
		this._mProHandleMap.Gput("OpenAwareConfin", OpenAwareConfin.getInstance);
		this._mProHandleMap.Gput("FootballBFConfin", FootballBFConfin.getInstance);
	}
}

/**协议标识对象*/
class HttpData {
	/**表示key (用类名做key)*/
	public mKey: string;
	/**value */
	public mValue;
}